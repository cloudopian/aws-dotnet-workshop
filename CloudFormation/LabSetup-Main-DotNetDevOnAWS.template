{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Resources": {
    "DotNetDevVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "DotNetDev-VPC"
          }
        ]
      }
    },
    "Pub1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            { "Fn::GetAZs": "" }
          ]
        },
        "CidrBlock": "10.0.1.0/24",
        "MapPublicIpOnLaunch": true,
        "VpcId": { "Ref": "DotNetDevVPC" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Pub-1"
          }
        ]
      }
    },
    "Pub2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            { "Fn::GetAZs": "" }
          ]
        },
        "CidrBlock": "10.0.2.0/24",
        "MapPublicIpOnLaunch": true,
        "VpcId": { "Ref": "DotNetDevVPC" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Pub-2"
          }
        ]
      }
    },
    "Pri1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            { "Fn::GetAZs": "" }
          ]
        },
        "CidrBlock": "10.0.3.0/24",
        "MapPublicIpOnLaunch": true,
        "VpcId": { "Ref": "DotNetDevVPC" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Pri-1"
          }
        ]
      }
    },
    "Pri2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            { "Fn::GetAZs": "" }
          ]
        },
        "CidrBlock": "10.0.4.0/24",
        "MapPublicIpOnLaunch": true,
        "VpcId": { "Ref": "DotNetDevVPC" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Pri-2"
          }
        ]
      }
    },
    "PubRT": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "DotNetDevVPC" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Pub-rt"
          }
        ]
      }
    },
    "PubRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "DotNetDevIg" },
        "RouteTableId": { "Ref": "PubRT" }
      }
    },
    "PriRT": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "DotNetDevVPC" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Pri-rt"
          }
        ]
      }
    },

    "DotNetDevIg": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "DotNetDevVPC"
          }
        ]
      }
    },
    "AttachIG": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "DotNetDevVPC" },
        "InternetGatewayId": { "Ref": "DotNetDevIg" }
      }
    },
    "Pub1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Pub1" },
        "RouteTableId": { "Ref": "PubRT" }
      }
    },
    "Pub2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Pub2" },
        "RouteTableId": { "Ref": "PubRT" }
      }
    },
    "Pri1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Pri1" },
        "RouteTableId": { "Ref": "PriRT" }
      }
    },
    "Pri2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Pri2" },
        "RouteTableId": { "Ref": "PriRT" }
      }
    },
    "DevMachineRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "RoleName": "DotNetDev-DevMachine-Role",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
        ]
      }
    },
    "DevMachineIntanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [ { "Ref": "DevMachineRole" } ],
        "InstanceProfileName": "DotNetDev-DevMachine-Role"
      }
    },
    "DevMachineSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "DotNetDev-DevMachine-SG",
        "GroupDescription": "Security group for dev machine with RDP Access and internal network access",
        "VpcId": { "Ref": "DotNetDevVPC" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 3389,
            "ToPort": 3389,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 3389,
            "ToPort": 3389,
            "CidrIpv6": "::/0"
          },
          {
            "IpProtocol": "-1",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": "10.0.0.0/16"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "DevMachineLinuxRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "RoleName": "DotNetDev-DevMachineLinux-Role",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM",
          "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        ]
      }
    },
    "DevMachineLinuxIntanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [ { "Ref": "DevMachineLinuxRole" } ],
        "InstanceProfileName": "DotNetDev-DevMachineLinux-Role"
      }
    },
    "DevMachineLinuxSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "DotNetDev-DevMachineLinux-SG",
        "GroupDescription": "Security group for linux dev machine with SSH Access and internal network access",
        "VpcId": { "Ref": "DotNetDevVPC" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIpv6": "::/0"
          },
          {
            "IpProtocol": "-1",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": "10.0.0.0/16"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "MyTigerAppServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "elasticbeanstalk.amazonaws.com"
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": "elasticbeanstalk"
                }
              }
            }
          ]
        },
        "RoleName":"MyTigerAppServiceRole",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth",
          "arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkService"
        ]
      }
    },
    "MyTigerAppEC2Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "RoleName": "MyTigerAppEC2Role",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier",
          "arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker",
          "arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier"
        ]
      }
    },
    "MyElasticBeanstalkEC2IntanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [ { "Ref": "MyTigerAppEC2Role" } ],
        "InstanceProfileName": "MyTigerAppEC2Role"
      }
    },
    "MyTigerAppPolicyPart1": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "Sample policy granting permission to deploy MyTigerApp using AWS Elastic Beanstalk - Part 1. Since the length exceeds max limit the policy is broken into 2 parts",
        "ManagedPolicyName": "MyTigerApp-Policy-Part1",
        "Path": "/",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "S3",
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": "*",
              "Condition": {
                "StringEquals": {
                  "aws:RequestedRegion": { "Ref": "AWS::Region" }
                }
              }
            },
            {
              "Sid": "General",
              "Effect": "Allow",
              "Action": [
                "elasticbeanstalk:*",
                "elasticloadbalancing:*",
                "cloudwatch:*",
                "s3:*",
                "sns:Get*",
                "sns:List*",
                "rds:Describe*",
                "sqs:Get*",
                "sqs:List*",
                "cloudformation:*",
                "logs:*",
                "iam:GetPolicyVersion",
                "iam:GetRole",
                "iam:PassRole",
                "iam:ListRolePolicies",
                "iam:ListAttachedRolePolicies",
                "iam:ListInstanceProfiles",
                "iam:ListRoles",
                "iam:ListServerCertificates",
                "acm:DescribeCertificate",
                "acm:ListCertificates",
                "codebuild:CreateProject",
                "codebuild:DeleteProject",
                "codebuild:BatchGetBuilds",
                "codebuild:StartBuild"
              ],
              "Resource": "*",
              "Condition": {
                "StringEquals": {
                  "aws:RequestedRegion": { "Ref": "AWS::Region" }
                }
              }
            },
            {
              "Sid": "IAMRole1",
              "Effect": "Allow",
              "Action": [
                "iam:AddRoleToInstanceProfile",
                "iam:CreateInstanceProfile",
                "iam:CreateRole"
              ],
              "Resource": [
                { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/aws-elasticbeanstalk*" },
                { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:instance-profile/aws-elasticbeanstalk*" }
              ]
            },
            {
              "Sid": "IAMRole2",
              "Effect": "Allow",
              "Action": [
                "iam:CreateServiceLinkedRole"
              ],
              "Resource": [
                { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling*" }
              ],
              "Condition": {
                "StringLike": {
                  "iam:AWSServiceName": "autoscaling.amazonaws.com"
                }
              }
            },
            {
              "Sid": "IAMRole3",
              "Effect": "Allow",
              "Action": [
                "iam:CreateServiceLinkedRole"
              ],
              "Resource": [
                { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/elasticbeanstalk.amazonaws.com/AWSServiceRoleForElasticBeanstalk*" }
              ],
              "Condition": {
                "StringLike": {
                  "iam:AWSServiceName": "elasticbeanstalk.amazonaws.com"
                }
              }
            },
            {
              "Sid": "IAMRole4",
              "Effect": "Allow",
              "Action": [
                "iam:CreateServiceLinkedRole"
              ],
              "Resource": [
                { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/elasticloadbalancing.amazonaws.com/AWSServiceRoleForElasticLoadBalancing" }
              ],
              "Condition": {
                "StringLike": {
                  "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
                }
              }
            },
            {
              "Sid": "IAMRole5",
              "Effect": "Allow",
              "Action": [
                "iam:AttachRolePolicy"
              ],
              "Resource": "*",
              "Condition": {
                "StringLike": {
                  "iam:PolicyArn": [
                    "arn:aws:iam::aws:policy/AWSElasticBeanstalk*",
                    "arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalk*"
                  ]
                }
              }
            },
            {
              "Effect": "Deny",
              "Action": [
                "cloudformation:CreateStack",
                "cloudformation:DeleteStack",
                "cloudformation:UpdateStack"
              ],
              "Resource": [
                "arn:*:cloudformation:*:*:stack/LabSetup*"
              ],
              "Condition": {
                "StringEquals": {
                  "aws:RequestedRegion": { "Ref": "AWS::Region" }
                }
              }
            }
          ]
        }
      }
    },
    "MyTigerAppPolicyPart2": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "Sample policy granting permission to deploy MyTigerApp using AWS Elastic Beanstalk - Part 2. Since the length exceeds max limit the policy is broken into 2 parts",
        "ManagedPolicyName": "MyTigerApp-Policy-Part2",
        "Path": "/",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "EC2StarInclusions",
              "Effect": "Allow",
              "Action": [
                "ec2:Describe*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "EC2ExplicitAllResources",
              "Effect": "Allow",
              "Action": [
                "ec2:CreateKeyPair",
                "ec2:DeleteKeyPair",
                "ec2:CreateVolume",
                "ec2:DeleteVolume",
                "ec2:AttachVolume",
                "ec2:DetachVolume",
                "ec2:CreateTags",
                "ec2:DeleteTags",
                "ec2:AssociateIamInstanceProfile",
                "ec2:DisassociateIamInstanceProfile",
                "ec2:ReplaceIamInstanceProfileAssociation",
                "ec2:GetConsoleOutput",
                "ec2:GetConsoleScreenshot",
                "ec2:GetPasswordData",
                "ec2:ModifyInstanceAttribute",
                "ec2:ModifyVolume",
                "ec2:ModifyVolumeAttribute",
                "ec2:MonitorInstances",
                "ec2:RebootInstances",
                "ec2:ReportInstanceStatus",
                "ec2:StopInstances",
                "ec2:TerminateInstances",
                "ec2:AssociateVpcCidrBlock",
                "ec2:DisassociateVpcCidrBlock",
                "ec2:CreateVpc",
                "ec2:DeleteVpc",
                "ec2:ModifyVpcAttribute",
                "ec2:AssignPrivateIpAddresses",
                "ec2:UnassignPrivateIpAddresses",
                "ec2:AllocateAddress",
                "ec2:AssociateAddress",
                "ec2:DisassociateAddress",
                "ec2:ReleaseAddress",
                "ec2:AttachInternetGateway",
                "ec2:DeleteInternetGateway",
                "ec2:CreateInternetGateway",
                "ec2:DetachInternetGateway",
                "ec2:AssociateRouteTable",
                "ec2:CreateRoute",
                "ec2:CreateRouteTable",
                "ec2:DeleteRoute",
                "ec2:DeleteRouteTable",
                "ec2:ReplaceRoute",
                "ec2:ReplaceRouteTableAssociation",
                "ec2:DisassociateRouteTable",
                "ec2:AssociateSubnetCidrBlock",
                "ec2:DisassociateSubnetCidrBlock",
                "ec2:CreateSubnet",
                "ec2:DeleteSubnet",
                "ec2:ModifySubnetAttribute",
                "ec2:AttachNetworkInterface",
                "ec2:DetachNetworkInterface",
                "ec2:CreateNetworkInterface",
                "ec2:DeleteNetworkInterface",
                "ec2:AttachNetworkInterface",
                "ec2:DetachNetworkInterface",
                "ec2:CreateNetworkInterfacePermission",
                "ec2:DeleteNetworkInterfacePermission",
                "ec2:ModifyNetworkInterfaceAttribute",
                "ec2:ResetNetworkInterfaceAttribute",
                "ec2:CreateNetworkAcl",
                "ec2:DeleteNetworkAcl",
                "ec2:CreateNetworkAclEntry",
                "ec2:DeleteNetworkAclEntry",
                "ec2:ReplaceNetworkAclEntry",
                "ec2:ReplaceNetworkAclAssociation",
                "ec2:CreateSecurityGroup",
                "ec2:DeleteSecurityGroup",
                "ec2:AuthorizeSecurityGroupEgress",
                "ec2:AuthorizeSecurityGroupIngress",
                "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
                "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
                "ec2:RevokeSecurityGroupEgress",
                "ec2:RevokeSecurityGroupIngress"
              ],
              "Resource": [
                "*"
              ],
              "Condition": {
                "StringEquals": {
                  "aws:RequestedRegion": { "Ref": "AWS::Region" }
                }
              }
            },
            {
              "Sid": "EC2LimitInstanceSize",
              "Effect": "Allow",
              "Action": [
                "ec2:RunInstances",
                "ec2:StartInstances"
              ],
              "Resource": "arn:aws:ec2:*:*:instance/*",
              "Condition": {
                "ForAnyValue:StringEqualsIgnoreCase": {
                  "ec2:InstanceType": [
                    "t2.small",
                    "t2.medium",
                    "t2.large",
                    "t2.xlarge",
                    "t3:small",
                    "t3.medium",
                    "t3.large",
                    "t3.xlarge"
                  ]
                },
                "StringEqualsIgnoreCase": {
                  "aws:RequestedRegion": { "Ref": "AWS::Region" }
                }
              }
            },
            {
              "Sid": "EC2LimitInstanceSizeMiscResources",
              "Effect": "Allow",
              "Action": [
                "ec2:RunInstances",
                "ec2:StartInstances"
              ],
              "Resource": [
                "arn:aws:ec2:*:*:volume/*",
                "arn:aws:ec2:*:*:key-pair/*",
                "arn:aws:ec2:*:*:security-group/*",
                "arn:aws:ec2:*:*:snapshot/*",
                "arn:aws:ec2:*:*:placement-group/*",
                "arn:aws:ec2:*:*:image/*",
                "arn:aws:ec2:*:*:network-interface/*",
                "arn:aws:ec2:*:*:subnet/*",
                "arn:aws:ec2:*:*:launch-template/*"
              ],
              "Condition": {
                "StringEqualsIgnoreCase": {
                  "aws:RequestedRegion": { "Ref": "AWS::Region" }
                }
              }
            },
            {
              "Sid": "ASStarInclusions",
              "Effect": "Allow",
              "Action": [
                "autoscaling:Attach*",
                "autoscaling:Batch*",
                "autoscaling:CompleteLifecycleAction",
                "autoscaling:CreateOrUpdateTags",
                "autoscaling:Delete*",
                "autoscaling:Describe*",
                "autoscaling:Detach*",
                "autoscaling:DisableMetricsCollection",
                "autoscaling:EnableMetricsCollection",
                "autoscaling:EnterStandby",
                "autoscaling:ExecutePolicy",
                "autoscaling:ExitStandby",
                "autoscaling:PutLifecycleHook",
                "autoscaling:PutNotificationConfiguration",
                "autoscaling:PutScalingPolicy",
                "autoscaling:RecordLifecycleActionHeartbeat",
                "autoscaling:ResumeProcesses",
                "autoscaling:SetDesiredCapacity",
                "autoscaling:SetInstanceHealth",
                "autoscaling:SetInstanceProtection",
                "autoscaling:SuspendProcesses",
                "autoscaling:TerminateInstanceInAutoScalingGroup"
              ],
              "Resource": [
                "*"
              ],
              "Condition": {
                "StringEquals": {
                  "aws:RequestedRegion": { "Ref": "AWS::Region" }
                }
              }
            },
            {
              "Sid": "ASMaxSize",
              "Effect": "Allow",
              "Action": [
                "autoscaling:CreateAutoScalingGroup",
                "autoscaling:PutScheduledUpdateGroupAction",
                "autoscaling:UpdateAutoScalingGroup"
              ],
              "Resource": [
                "*"
              ],
              "Condition": {
                "NumericLessThanEquals": {
                  "autoscaling:MaxSize": "4"
                },
                "StringEquals": {
                  "aws:RequestedRegion": { "Ref": "AWS::Region" }
                }
              }
            },
            {
              "Sid": "ASCreateLaunchConfiguration",
              "Effect": "Allow",
              "Action": "autoscaling:CreateLaunchConfiguration",
              "Resource": [
                "arn:aws:autoscaling:*:*:launchConfiguration:*"
              ],
              "Condition": {
                "ForAnyValue:StringEqualsIgnoreCase": {
                  "autoscaling:InstanceType": [
                    "t2.small",
                    "t2.medium",
                    "t2.large",
                    "t2.xlarge",
                    "t3.small",
                    "t3.medium",
                    "t3.large",
                    "t3.xlarge"
                  ]
                },
                "StringEqualsIgnoreCase": {
                  "aws:RequestedRegion": { "Ref": "AWS::Region" }
                }
              }
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "VPCId": {
      "Description": "DevOps VPC",
      "Value": { "Ref": "DotNetDevVPC" }
    },
    "Subnet1": {
      "Description": "Subnet 1 id",
      "Value": { "Ref": "Pub1" }
    },
    "Subnet2": {
      "Description": "Subnet 2 id",
      "Value": { "Ref": "Pub2" }
    }
  }

}
